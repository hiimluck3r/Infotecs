Все производилось на предварительно настроенной CentOS 7 в Virtualbox

========
Компиляция может выполняться двумя способами:
1) Ручная (запуск cmake и make/msbuild соответственно).
2) Автоматизированная (Ansible+Vagrant+Docker)

Для упрощения были сделаны .bat и .sh скрипты, которые запускают ручные команды.
Результаты компиляции находятся в директории provisioning/src, там же можно
найти и исходники.

Примеры полученных лог-файлов лежат в logs_example/

Построение Dockerfile и Docker-image производится в Vagrant-box
на базе debian/bullseye64 со стороннего репозитория (офф. репо Hashicorp
недоступны в РФ без впн)

В Vagrantfile в качестве provisioner указан Ansible при помощи которого
мы и будем настраивать виртуальную машину. Инвентарь генерируется
самим Vagrant, поэтому на него можно не обращать внимания.

Для складности в логике было решено разделить процесс настройки на две роли:
- init - инициализационные моменты (установка нужных пакетов, Docker)
- compile - сама компиляция (перенос файлов туда, компиляция, логи наружу)

По заготовленному Dockerfile переносим информацию внутрь контейнера, собираем sqlite и тут же выходим (процесс завершился)
Логи сохраняются благодаря томам, указанным в ad-hoc команде.

После этого вытаскиваем при помощи fetch лог-файл наружу (по ТЗ нам нужен только он)

========
!Важно!

ad-hoc Docker-команды через ansible.builtin.shell - не лучший вариант, однако
хотелось использовать как можно меньше зависимостей. Лучше всего использовать
community модуль Docker для Ansible, чтобы более гибко взаимодействовать с ним.

Можно было бы также использовать Docker-compose для более удобной настройки тех же томов,
однако это Overkill и это не необходимо.

========
Проверялось на Windows 10 ReviOS Build 10.0.19045 Build 19045
CentOS Linux release 7.9.2009 (Core)